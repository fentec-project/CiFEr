/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: fame.proto */

#ifndef PROTOBUF_C_fame_2eproto__INCLUDED
#define PROTOBUF_C_fame_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "data.pb-c.h"

typedef struct _CfeFamePubKeySer CfeFamePubKeySer;
typedef struct _CfeFameSecKeySer CfeFameSecKeySer;
typedef struct _CfeFameAttribKeysSer CfeFameAttribKeysSer;
typedef struct _CfeFameCipherSer CfeFameCipherSer;


/* --- enums --- */


/* --- messages --- */

struct  _CfeFamePubKeySer
{
  ProtobufCMessage base;
  OctetSer *part_g2_1;
  OctetSer *part_g2_2;
  OctetSer *part_gt_1;
  OctetSer *part_gt_2;
};
#define CFE_FAME_PUB_KEY_SER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cfe_fame_pub_key_ser__descriptor) \
    , NULL, NULL, NULL, NULL }


struct  _CfeFameSecKeySer
{
  ProtobufCMessage base;
  size_t n_part_int;
  MpzSer **part_int;
  size_t n_part_g1;
  OctetSer **part_g1;
};
#define CFE_FAME_SEC_KEY_SER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cfe_fame_sec_key_ser__descriptor) \
    , 0,NULL, 0,NULL }


struct  _CfeFameAttribKeysSer
{
  ProtobufCMessage base;
  size_t n_k0;
  OctetSer **k0;
  size_t n_k;
  OctetSer **k;
  size_t n_k_prime;
  OctetSer **k_prime;
  size_t n_row_to_attrib;
  int64_t *row_to_attrib;
};
#define CFE_FAME_ATTRIB_KEYS_SER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cfe_fame_attrib_keys_ser__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _CfeFameCipherSer
{
  ProtobufCMessage base;
  size_t n_ct0;
  OctetSer **ct0;
  size_t n_ct;
  OctetSer **ct;
  OctetSer *ct_prime;
  MspSer *msp;
};
#define CFE_FAME_CIPHER_SER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cfe_fame_cipher_ser__descriptor) \
    , 0,NULL, 0,NULL, NULL, NULL }


/* CfeFamePubKeySer methods */
void   cfe_fame_pub_key_ser__init
                     (CfeFamePubKeySer         *message);
size_t cfe_fame_pub_key_ser__get_packed_size
                     (const CfeFamePubKeySer   *message);
size_t cfe_fame_pub_key_ser__pack
                     (const CfeFamePubKeySer   *message,
                      uint8_t             *out);
size_t cfe_fame_pub_key_ser__pack_to_buffer
                     (const CfeFamePubKeySer   *message,
                      ProtobufCBuffer     *buffer);
CfeFamePubKeySer *
       cfe_fame_pub_key_ser__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfe_fame_pub_key_ser__free_unpacked
                     (CfeFamePubKeySer *message,
                      ProtobufCAllocator *allocator);
/* CfeFameSecKeySer methods */
void   cfe_fame_sec_key_ser__init
                     (CfeFameSecKeySer         *message);
size_t cfe_fame_sec_key_ser__get_packed_size
                     (const CfeFameSecKeySer   *message);
size_t cfe_fame_sec_key_ser__pack
                     (const CfeFameSecKeySer   *message,
                      uint8_t             *out);
size_t cfe_fame_sec_key_ser__pack_to_buffer
                     (const CfeFameSecKeySer   *message,
                      ProtobufCBuffer     *buffer);
CfeFameSecKeySer *
       cfe_fame_sec_key_ser__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfe_fame_sec_key_ser__free_unpacked
                     (CfeFameSecKeySer *message,
                      ProtobufCAllocator *allocator);
/* CfeFameAttribKeysSer methods */
void   cfe_fame_attrib_keys_ser__init
                     (CfeFameAttribKeysSer         *message);
size_t cfe_fame_attrib_keys_ser__get_packed_size
                     (const CfeFameAttribKeysSer   *message);
size_t cfe_fame_attrib_keys_ser__pack
                     (const CfeFameAttribKeysSer   *message,
                      uint8_t             *out);
size_t cfe_fame_attrib_keys_ser__pack_to_buffer
                     (const CfeFameAttribKeysSer   *message,
                      ProtobufCBuffer     *buffer);
CfeFameAttribKeysSer *
       cfe_fame_attrib_keys_ser__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfe_fame_attrib_keys_ser__free_unpacked
                     (CfeFameAttribKeysSer *message,
                      ProtobufCAllocator *allocator);
/* CfeFameCipherSer methods */
void   cfe_fame_cipher_ser__init
                     (CfeFameCipherSer         *message);
size_t cfe_fame_cipher_ser__get_packed_size
                     (const CfeFameCipherSer   *message);
size_t cfe_fame_cipher_ser__pack
                     (const CfeFameCipherSer   *message,
                      uint8_t             *out);
size_t cfe_fame_cipher_ser__pack_to_buffer
                     (const CfeFameCipherSer   *message,
                      ProtobufCBuffer     *buffer);
CfeFameCipherSer *
       cfe_fame_cipher_ser__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfe_fame_cipher_ser__free_unpacked
                     (CfeFameCipherSer *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CfeFamePubKeySer_Closure)
                 (const CfeFamePubKeySer *message,
                  void *closure_data);
typedef void (*CfeFameSecKeySer_Closure)
                 (const CfeFameSecKeySer *message,
                  void *closure_data);
typedef void (*CfeFameAttribKeysSer_Closure)
                 (const CfeFameAttribKeysSer *message,
                  void *closure_data);
typedef void (*CfeFameCipherSer_Closure)
                 (const CfeFameCipherSer *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cfe_fame_pub_key_ser__descriptor;
extern const ProtobufCMessageDescriptor cfe_fame_sec_key_ser__descriptor;
extern const ProtobufCMessageDescriptor cfe_fame_attrib_keys_ser__descriptor;
extern const ProtobufCMessageDescriptor cfe_fame_cipher_ser__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_fame_2eproto__INCLUDED */
