/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: gpsw.proto */

#ifndef PROTOBUF_C_gpsw_2eproto__INCLUDED
#define PROTOBUF_C_gpsw_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "data.pb-c.h"

typedef struct _CfeGpswPubKeySer CfeGpswPubKeySer;
typedef struct _CfeGpswKeySer CfeGpswKeySer;
typedef struct _CfeGpswCipherSer CfeGpswCipherSer;


/* --- enums --- */


/* --- messages --- */

struct  _CfeGpswPubKeySer
{
  ProtobufCMessage base;
  VecOctetSer *t;
  OctetSer *y;
};
#define CFE_GPSW_PUB_KEY_SER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cfe_gpsw_pub_key_ser__descriptor) \
    , NULL, NULL }


struct  _CfeGpswKeySer
{
  ProtobufCMessage base;
  VecOctetSer *d;
  MspSer *msp;
};
#define CFE_GPSW_KEY_SER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cfe_gpsw_key_ser__descriptor) \
    , NULL, NULL }


struct  _CfeGpswCipherSer
{
  ProtobufCMessage base;
  size_t n_gamma;
  int64_t *gamma;
  OctetSer *e0;
  VecOctetSer *e;
};
#define CFE_GPSW_CIPHER_SER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cfe_gpsw_cipher_ser__descriptor) \
    , 0,NULL, NULL, NULL }


/* CfeGpswPubKeySer methods */
void   cfe_gpsw_pub_key_ser__init
                     (CfeGpswPubKeySer         *message);
size_t cfe_gpsw_pub_key_ser__get_packed_size
                     (const CfeGpswPubKeySer   *message);
size_t cfe_gpsw_pub_key_ser__pack
                     (const CfeGpswPubKeySer   *message,
                      uint8_t             *out);
size_t cfe_gpsw_pub_key_ser__pack_to_buffer
                     (const CfeGpswPubKeySer   *message,
                      ProtobufCBuffer     *buffer);
CfeGpswPubKeySer *
       cfe_gpsw_pub_key_ser__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfe_gpsw_pub_key_ser__free_unpacked
                     (CfeGpswPubKeySer *message,
                      ProtobufCAllocator *allocator);
/* CfeGpswKeySer methods */
void   cfe_gpsw_key_ser__init
                     (CfeGpswKeySer         *message);
size_t cfe_gpsw_key_ser__get_packed_size
                     (const CfeGpswKeySer   *message);
size_t cfe_gpsw_key_ser__pack
                     (const CfeGpswKeySer   *message,
                      uint8_t             *out);
size_t cfe_gpsw_key_ser__pack_to_buffer
                     (const CfeGpswKeySer   *message,
                      ProtobufCBuffer     *buffer);
CfeGpswKeySer *
       cfe_gpsw_key_ser__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfe_gpsw_key_ser__free_unpacked
                     (CfeGpswKeySer *message,
                      ProtobufCAllocator *allocator);
/* CfeGpswCipherSer methods */
void   cfe_gpsw_cipher_ser__init
                     (CfeGpswCipherSer         *message);
size_t cfe_gpsw_cipher_ser__get_packed_size
                     (const CfeGpswCipherSer   *message);
size_t cfe_gpsw_cipher_ser__pack
                     (const CfeGpswCipherSer   *message,
                      uint8_t             *out);
size_t cfe_gpsw_cipher_ser__pack_to_buffer
                     (const CfeGpswCipherSer   *message,
                      ProtobufCBuffer     *buffer);
CfeGpswCipherSer *
       cfe_gpsw_cipher_ser__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfe_gpsw_cipher_ser__free_unpacked
                     (CfeGpswCipherSer *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CfeGpswPubKeySer_Closure)
                 (const CfeGpswPubKeySer *message,
                  void *closure_data);
typedef void (*CfeGpswKeySer_Closure)
                 (const CfeGpswKeySer *message,
                  void *closure_data);
typedef void (*CfeGpswCipherSer_Closure)
                 (const CfeGpswCipherSer *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cfe_gpsw_pub_key_ser__descriptor;
extern const ProtobufCMessageDescriptor cfe_gpsw_key_ser__descriptor;
extern const ProtobufCMessageDescriptor cfe_gpsw_cipher_ser__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_gpsw_2eproto__INCLUDED */
